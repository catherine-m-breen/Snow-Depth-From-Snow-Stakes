%%% validation code %%%

%%%% validation by clicking the top and bottom of the stake

clear all; close all; clc

% camera number
cameraNumber = 'W6A' ; %%% FILL IN HERE

%%%%%% metadata
%%% Go to the directory with the images
%file_path = 'C:\Users\cbreen\Documents\SnowEx2020_Cameras\E8A';
file_path = uigetdir;
addpath(file_path)
listing = dir([file_path,'/*.JPG']);

%%% The poles should be 1.5 in by 10 feet; so 3.81 cm by 304.8 cm are their full dimensions.

LengthPerPixel = 0.14;
stake_length_cm = 304.8; %% cm/ make this the first image or the actual length %%

%%%%%%%%%%

PixelLengths   = zeros([1 size(listing,1)]);
SnowDepth = zeros([1 size(listing,1)]); % in centimeters
SnowDepth_distance = zeros([1 size(listing,1)]);

%%%%%%%%%%
topX = zeros([1 size(listing,1)]);
topY = zeros([1 size(listing,1)]);
bottomX = zeros([1 size(listing,1)]);
bottomY = zeros([1 size(listing,1)]);
distance = zeros([1 size(listing,1)]);

for i=1: 4 % size(listing,1) % started when there was snow and no tree in canopy

    img = imread(listing(i).name);
    
    %line that accounts for lens distortion
    IntrinsicMatrix = [9406.3572 0 0; 0  9262.9601 0; 3163.8267 1750.1192 1];
    radialDistortion = [0.4498 -1.9261];
    cameraParams = cameraParameters('IntrinsicMatrix',IntrinsicMatrix,'RadialDistortion',radialDistortion);
    img = undistortImage(img,cameraParams);
    
    %img = imrotate(img, -2); %%% rotation setting
   

    %%%% get top and bottom of stake %%%%%
    imshow(img); % Displays the image
    top = ginput(1); % Opens crosshairs to select the top...
    bottom = ginput(1); % ...and the bottom
    x = [top(1),bottom(1)];
    y = [top(2),bottom(2)];
    
    %%% store them for distance formula %%%
    topX(i) = top(1);
    topY(i) = top(2);
    bottomX(i) = bottom(1); 
    bottomY(i) = bottom(2);

    %%% rgb values along the top and bottom of the stake %% rgb_line
    % x and y must be vector pairs
    rgb = improfile(img,x,y);
    r = rgb(:,:,1);
    g = rgb(:,:,2);
    b = rgb(:,:,3);

        %%%%%
    PixelLengths(i) = length(b); %PixelLengths(i) = length(b);
    SnowFreePixels = PixelLengths(1); %Matlab indexes at 1?
    SnowPixels = length(b);
    SnowDepth(i) = 304.8 - (SnowPixels * LengthPerPixel); %SnowDepth(i)
    
    %%%%%
    % distance formula
    distance(i) = sqrt((topX(i)-bottomX(i))^2+(topY(i)-bottomY(i))^2);
    SnowDepth_distance(i) =  304.8 - (distance(i) * LengthPerPixel);
   
end

%%%%%%%%%%% extract date and time
 for z=1:size(listing,1)
     f = fullfile(listing(z).folder,(listing(z).name));
     d = imfinfo(f).DateTime();
     creation = datetime(d, 'InputFormat','yyyy:MM:dd HH:mm:ss');
     creationDateTime(z) = creation;
 end
 
 %%% all values
plot(creationDateTime,SnowDepth);
set(gcf,'Position',[23         531        1658         302]);
legend('Raw');%,'SNOTEL');
ylabel('Snow Depth');
title('Snow Depth (cm) from Snow Stakes');


%%% take the minimum value of each day
timeseries = timetable(creationDateTime(:),SnowDepth(:));
timeseriesRaw = timetable(creationDateTime(:),PixelLengths(:));
timeseriesDistance = timetable(creationDateTime(:),distance(:));

%%% write two time tables 1) the snow depths
%%% and 2) the pixel lengths (in case the calibration is wrong)

writetimetable(timeseries,strcat('timeseries_',cameraNumber,'_validation.csv'));
writetimetable(timeseriesRaw, strcat('timeseriesPixelLengths_',cameraNumber,'_validation.csv'))

close all; clc
